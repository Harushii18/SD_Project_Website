<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js"></script>

<!-- Div to display alerts when studnets are assigned -->
<div id="showAssign" class="alert alert-primary" role="alert"></div>

<script>
  var alertBox = document.getElementById("showAssign");
  alertBox.style.display = "none";
</script>

<div id="sizingDiv" style="text-align:center">
<br></br>
<h1>Manage Schedules</h1>

<br>

<!-- Vertically centered modal -->
<div class="modal fade" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">SELECT HOSPITAL</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <em>Assign Student To A Hospital Below:</em>

        <br>
        <br>

        <!--Dropdown for hospitals -->

        <select name="hospital_drop" id="hospital_id"  class="btn btn-secondary dropdown-toggle">
        <%= options = options_from_collection_for_select(Hospital.all, 'id', 'hospital_name') %>

        </select>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="assignHospital()" data-dismiss="modal">Confirm</button>
      </div>
    </div>
  </div>
</div>


<br>

<style>
  #timeBlockPopUp{
    padding: 20px;
    position: absolute;
    height: auto;
    min-width: 100px;
    width: auto;
    transition: 0s;
    transform: translate(-50%,-50%);
    pointer-events: none;
    background-color: white;
    filter: grayscale(0%);
    //opacity: 90%;

    background: rgba(255, 255, 255, 0.97);


  }

  .heading{
    color:black;
    text-shadow: 1px 1px 0px #d3d3d3;
   }

   .field_heading{

     color:black;
    }

   .field_info{

      color:black;
    }

  .card {
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    transition: 0.3s;
    border-radius: 20px; /* 5px rounded corners */

  }


  }
</style>


<!-- I used this to keep the popup div somewhere -->
<div id="timeBlockPopUp" class="card"></div>
<script>
  var timeBlockPopUp = document.getElementById('timeBlockPopUp');
  timeBlockPopUp.style.display = "none";
  document.addEventListener('mousemove',function(ev){
      var x = ev.pageX;
      var y = ev.pageY;
      timeBlockPopUp.style.left = x+"px";
      timeBlockPopUp.style.top = y-250+"px";
  });



</script>





<div class="container-fluid">
    <div class="d-flex justify-content-evenly">

    </div>
</div>

<!-- Add search forms for OWN model -->
<!-- unless statement takes out search bar when editing,creating,etc-->
<% unless url_for != users_path %>
<!--Makes the seach field neater however cant find a way to pull search field to  right of navbar -->
  <form class="form-inline my-2 my-lg-0">
      <%=render "users/filters"%>
  </form>
<% end %>
<!--ADD Below check users controller and -filters.html.erb for eg -->




<form action="/schedules">
<label> <h5>Select Programme Code</h5> </label>
<br>
<select name="programme_id" id="programme_id" onchange="this.form.submit()" class="btn btn-primary dropdown-toggle">
<%= options = options_from_collection_for_select(Programme.all, 'id', 'programme_code',@current_programme_id) %>
</select>
</form>
<br></br>
<button type="button" class="btn btn-primary" data-toggle="modal" onclick="loadModalInfo()" data-target="#outerDiv">Update Database with Changes</button>

<div id="outerDiv" class="modal fade"   tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-scrollable modal-xl"  role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Pending Changes:</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div id="modalContent" class="modal-body">

        
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" onclick="makeChanges()" >Save changes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
      </div>
    </div>
  </div>
</div>

<!-- Some functions for the Drag and Drop Feature -->


<%# centers div %>
<div class="mt-4 d-flex justify-content-center" id="schedule_window" style="padding:10px">


<script>

/*Note: Here is a rough hierarchical structure of the classes:

(-->: uses)

ProgrammeSchedule-->Timeline
Timeline-->TimeBlock
Timeline-->SpecialtyBlock
Timeline-->Schedule

*/


  class Timeline{
    constructor(studentID, studentName, studentNumber){
        this.studentID = studentID;
        this.studentName = studentName;
        this.studentNumber = studentNumber;
        this.specialties = [];
        this.hospitals = [];
        this.timeBlocks = [];

        this.schedules = [];
        this.colour_pallette = ["#04b8a9", "#b80453", "#f9f60d", "#0df915", "#fdd64d", "#b4dbdd", "indigo"];
        this.initialiseSpecialties();
        this.initialiseTimeBlocks(this.specialties, studentID);





        //This button acts as an event so that the array of schedules can be poppulated
        this.btnSaveToChanges = document.createElement('button');
        this.btnSaveToChanges.innerHTML = "Save changes";
        this.btnSaveToChanges.setAttribute("class","btn btn-success");
        this.btnSaveToChanges.setAttribute("style","border-radius: 100px; display: inline-block; text-align: center; padding: 10px; width: 150px;");

        this.btnClearSchedule = document.createElement('button');
        this.btnClearSchedule.innerHTML = "Clear Schedule";
        this.btnClearSchedule.setAttribute("class","btn btn-outline-danger");
        this.btnClearSchedule.setAttribute("style","border-radius: 100px; display: inline-block; text-align: center; padding: 10px; width: 150px;");



        //When Save to Changes is clicked, populate schedules with all current schedules in timeline - checks each timebox.
        var that = this;
        this.btnSaveToChanges.onclick = function(ev){
          console.log("\nCleared Schedules Array\n");
          this.schedules = [];

          //Boolean to show if there's unassigned hospitals
          var unassignedHospital = false;

          //Var for list of current schedules in the timeline
          var summaryOfAddedSchedules = "~ To save changes to the database, click the button at the top of the screen.\n\n*Added Changes for ["+that.studentName+"]\n\n";
          var scheduleCounter = 0;
          for(var i=0; i<52;i++){
            if(that.timeBlocks[i].getAssigned()=="true"){
              scheduleCounter++;

              console.log("Create a new schedule in the timeline");
              var newSchedule = new Schedule();
              newSchedule.setWeekNo(that.timeBlocks[i].getWeekNo());
              newSchedule.setSpecialtyID(that.timeBlocks[i].getSpecialtyID());
              console.log("in btnSaveToChange: " + that.timeBlocks[i].getSpecialtyID());
              newSchedule.setStudentID(that.studentID);
              newSchedule.setSpecialtyDuration(that.timeBlocks[i].getSpecialtyDuration());
              //console.log("save clicked, hospitalID is : " +that.timeBlocks[i].hospitalID)
              //TODO: Set Hospital ID
              newSchedule.setHospitalID(that.timeBlocks[i].getHospitalID());

              console.log("Add new schedule to schedules array");
              console.log("StudentID: "+ newSchedule.getStudentID());
              console.log("Week_No: "+ newSchedule.getWeekNo());
              console.log("SpecialtyID: "+ newSchedule.getSpecialtyID());
              console.log("Specialty_Duration: "+ newSchedule.getSpecialtyDuration());
              console.log("HospitalID: "+ newSchedule.getHospitalID());
              console.log("");
              //console.log("timeline constructor")
              //console.log(that.timeBlocks[i].getSpecialtyID());
              //console.log("timeline constructor")

              if(that.timeBlocks[i].getHospitalName()=="unassigned"){
                unassignedHospital = true;
                break;
              }

              var scheduleInformation = scheduleCounter + ". \n"
                                        + "Duration: " + that.timeBlocks[i].getSpecialtyDuration()+" weeks\n"
                                        + "Start Date: " + that.timeBlocks[i].getStartDate()+"\n"
                                        + "End Date: " + that.timeBlocks[i].getEndDate()+"\n"
                                        + "Clinical Site: " + that.timeBlocks[i].getHospitalName()+"\n"
                                        + "Specialty: " + that.timeBlocks[i].getSpecialtyName()+"\n\n";

              summaryOfAddedSchedules = summaryOfAddedSchedules+ scheduleInformation;

              that.schedules.push(newSchedule);
            }

          }
          if(unassignedHospital==true){
            window.alert("*Failed To Save Schedule*\n\n~ Ensure all schedules are assigned to clinical sites before saving. ~");
          }
          else{
            window.confirm(summaryOfAddedSchedules);
           }

        };

        this.btnClearSchedule.onclick = function(ev){
          //Does an ajax Post request to the delete_with_student_id function in the schedules controller with params that.studentID
          $.ajax({url: "/schedules/delete_with_student_id", type: "POST" , data: jQuery.param({ student_id: that.studentID}) });
          window.location.reload();
        };



        //   $.ajax({url: "/schedules/delete_with_student_id", type: "POST" , data: jQuery.param({ student_id: studentID}), statusCode: {204: function() {window.location.reload();} } });
        
        // };
    }


    //Initialisation Methods
    initialiseTimeBlocks(specialties,studentID){
      for(var i =0; i<52; i++){
        var timeBlock = new TimeBlock(i+1, studentID, specialties);
        //console.log("Initialised Timeblock no: "+i);
        this.timeBlocks.push(timeBlock);
      }
    }

    //TODO: Fetch Specialty Name and Duration
    initialiseSpecialties(){
      var index = 0;
      <% @specialties.each do |specialty| %>
        var color = this.colour_pallette[index];

        var progsId=<%=@current_programme_id%>;
        var weeks=<%=CourseSpecialty.where(course_id: @programme_courses).where( specialty_id: specialty).pluck(:weeks)%>
        var specialtyBlock = new SpecialtyBlock(<%= specialty.id %>, "<%= specialty.SpecialtyName %>", weeks, this.studentID, color);
        this.specialties.push(specialtyBlock);
        index = index + 1;
      <%end%>

      console.log(this.specialties);
    }

    //TODO: Populate schedule array with any existing schedules, for that student, found in the database.
    initialiseSchedules(){
      console.log("Initialising Schedules");
      <% @schedules.each do |schedule| %>
        if(<%=schedule.student_id%>==this.studentID){
          //console.log("StudentID is: "+this.studentID);
          console.log("Matched :" + <%=schedule.student_id%> + " AND "+this.studentID);
          var currentSchedule = new Schedule();

          //console.log("Week No:"  + <%=schedule.week_no%>);
          var week_no = <%=Schedule.where(id: schedule.id).pluck(:week_no)%>;
          currentSchedule.setWeekNo(week_no);
          currentSchedule.setHospitalID(<%=schedule.hospital_id%>);
          currentSchedule.setSpecialtyID(<%=schedule.specialty_id%>);

          //ensure that we cannot drag that specialty since it is already there:
          //hide the specialty so it is not re-selected-> disable that specialty div
          var specialtyName =  <%=raw(Specialty.where(id: schedule.specialty_id).pluck(:specialtyName))%>;
          var currSp=document.getElementById(<%=schedule.student_id%>+"#"+<%=schedule.specialty_id%>+"#"+specialtyName);
          //change div's property
          currSp.style.cursor="not-allowed";
          currSp.style.opacity=0.3;
          //don't allow it to be dragged
          currSp.draggable=false;



          var specialtyDuration = <%=raw(Schedule.where(id: schedule.id).pluck(:specialty_duration))%>;
          currentSchedule.setSpecialtyDuration(specialtyDuration);

          this.showScheduleOnTimeline(currentSchedule);

        }
      <% end %>
    }

    //Class Methods
    //Show the schedule object on the timeline
    showScheduleOnTimeline(schedule){
      console.log("Showing New Schedule on Timeline");
      console.log("Student ID: " + this.studentID);

      var weekNo = schedule.getWeekNo();
      console.log("Week No is: "+weekNo);

      var timeBlock = this.timeBlocks[weekNo-1];

      //Retrieve Specialty ID
      var specialtyID = schedule.getSpecialtyID();
      console.log("Specialty ID is: " + specialtyID);

      //Retrieve Hospital ID
      var hospitalID = schedule.getHospitalID();
      console.log("Hospital ID is: " + specialtyID);
      this.timeBlocks[weekNo-1].setHospitalID(hospitalID);

      //Retrieve Specialty Duration
      var specialtyDuration = schedule.getSpecialtyDuration();
      console.log("Specialty Duration is: "+ specialtyDuration);
      this.timeBlocks[weekNo-1].setSpecialtyDuration(specialtyDuration+"");

      //Set the end date
      this.timeBlocks[weekNo-1].setEndDate();

      //Retrieve timeblox div id
      var data = this.timeBlocks[weekNo-1].getDivID();

      console.log("Div's id is: "+data);
      //Put specialty div in timebox div
      //ev.target.appendChild(document.getElementById(data));
      this.timeBlocks[weekNo-1].getDiv().style.background = document.getElementById(data).style.background;
     // ev.target.innerHTML = document.getElementById(data).innerHTML;

      //colours divs according to specialty duration
      let numDivSpan = this.timeBlocks[weekNo-1].getDiv().getAttribute("weekNo");
      let colorVal, specialtyN;
      for (let i=0;i<this.specialties.length;i++){
        //ensure that div is colour of specialty it is assigned to
        if (this.specialties[i].specialtyID==specialtyID){
          colorVal=this.specialties[i].color;
          specialtyN=this.specialties[i].getSpecialtyName();
          this.timeBlocks[weekNo-1].setSpecialtyName(specialtyN); //Set specialtyName in TimeBlock
          break;
        }
      }


    //change colours of amount of divs of specialty duration
      for (let i =  numDivSpan; i < parseInt(numDivSpan)+parseInt(specialtyDuration); i++) {
        //TODO: CAN CHANGE OTHER ATTRIBUTES OF THE OTHER DIVS- CHANGE ITS SPECIALTY ID ETC ETC
        var currDivID = this.studentID+"#"+i;
        console.log("Colouring div with ID: "+currDivID);
        //console.log("TempID is: "+tempID);
        document.getElementById(currDivID).style.background= colorVal;

      }

      //Set the Hospital Name in the Time Block
      this.timeBlocks[weekNo-1].setHospitalName();



      //Once assigned, allow for modal box to appear
      //this.timeBlocks[weekNo-1].getDiv().setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
      //this.timeBlocks[weekNo-1].getDiv().setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id
      //var hospital = prompt("please enter hospital", "vic");

      //this.timeBlocks[weekNo-1].setAssigned(true);
      this.timeBlocks[weekNo-1].setPseudoAssigned(true);
      this.timeBlocks[weekNo-1].setToolTipContents();
    }

    //Remove Schedule for a weekNo
    removeSchedule(weekNo){
      for(var i = 0; i< this.schedules.length; i++){
        if(this.schedules[i].getWeekNo()==weekNo){
          this.schedules.splice(i,1);
        }
      }
    }

    displayTimeline(){

      var timeLineDiv = document.createElement('div');
      //timeLineDiv.setAttribute("border","border:1px solid gray");
      timeLineDiv.style.borderRadius= "25px";
      timeLineDiv.style.boxShadow = "0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)";
      timeLineDiv.style.padding = "10px";
      //timeLineDiv.style.backgroundColor = "green";

      //Main Table
      var table = document.createElement('table');

      //Header Div
      var headerDiv = document.createElement('div');
      headerDiv.setAttribute("style","margin-top:20px; margin-bottom:0px;");

      //Button to update Schedule
      var buttonDiv = document.createElement('div');
      buttonDiv.setAttribute("style","margin-left: auto; margin-right: 10px; margin-top: 5px; float: right;");
      buttonDiv.appendChild(this.btnSaveToChanges);
      headerDiv.appendChild(buttonDiv);

      //Button to clear Schedule
      var buttonDiv = document.createElement('div');
      buttonDiv.setAttribute("style","margin-left: 10px; margin-right: auto; margin-top: 5px; float: left;");
      buttonDiv.appendChild(this.btnClearSchedule);
      headerDiv.appendChild(buttonDiv);

      //Add student information
      var studentInfoDiv = document.createElement('div');
      studentInfoDiv.setAttribute("style","display: inline-block; margin-left: 0px;");
      var studentInformation = [this.studentName, this.studentNumber];

      var tempTable = document.createElement('table');
      for(var i = 0 ;i<studentInformation.length;i++){
        var tr = document.createElement('tr');
        var h5 = document.createElement('h5');
        h5.innerHTML = studentInformation[i];
        var td = document.createElement('td');
        td.appendChild(h5);
        tr.appendChild(td);
        tempTable.appendChild(tr);
      }
      studentInfoDiv.appendChild(tempTable);
      headerDiv.appendChild(studentInfoDiv);
      var tr = document.createElement('tr');
      tr.appendChild(headerDiv);
      table.appendChild(tr);

      var tr = document.createElement('tr');
      var specialtyDiv = document.createElement('div');
      specialtyDiv.setAttribute("style","border-radius: 25px; border: 2px dotted gray; display: inline-block; padding: 15px; float: left;");
      //Add Specialties for students
      for(var i = 0; i<this.specialties.length;i++ ){
        specialtyDiv.appendChild(this.specialties[i].getDiv());
      }
      tr.appendChild(specialtyDiv);
      table.appendChild(tr);

      //Spacing
      var br = document.createElement('br');
      table.appendChild(br);
      //Spacing

      //Visual timeline
      //52 divs - Timeblocks

      var tr = document.createElement('tr');
      for(var i = 0; i<52; i++){
        //var p = document.createElement('p');
        var td = document.createElement('td');
        td.style.padding ="0px"; //No spacing between timeBoxes
        td.appendChild(this.timeBlocks[i].getDiv());
        tr.appendChild(td);
      }

/*
      var tr = document.createElement('tr');
      for(var i = 0; i<52; i++){
        var p = document.createElement('p');
        var td = document.createElement('td');
        td.style.padding ="0px"; //No spacing between timeBoxes
        td.appendChild(this.timeBlocks[i].getDiv());
        tr.appendChild(td);
      }
      */

      //Container for 52 Timeblocks
      var container = document.createElement('div');
      container.appendChild(tr);
      container.appendChild(document.createElement('br'));
      container.style.height = "50%";
      //was 1800px before. Now it is 95 percent of the viewport
      container.style.width="95vw";
      container.style.overflow = 'overlay';
      container.style.alignItems = 'center';
      var tr = document.createElement('tr');
      tr.appendChild(container);
      table.appendChild(tr);

      //Spacing
      var br = document.createElement('br');
      table.appendChild(br);
      //Spacing



      //Spacing
      var br = document.createElement('br');
      table.appendChild(br);
      //Spacing


      timeLineDiv.appendChild(table);
      console.log(timeLineDiv);



      return timeLineDiv; //Return row which corresponds to a student's timeline

    }

    //Getter & Setter Methods
    //Return array of schedules
    getSchedules(){
      return this.schedules;
    }




  }

  class TimeBlock {
    constructor(weekNo,studentID, specialties){


      this.weekNo = weekNo;
      this.studentID = studentID;
      this.hospitalID = 0;
      this.specialtiesArr=specialties;
      this.div = document.createElement('div');
      this.assigned_hosp = document.createElement('p');

      this.div.setAttribute("weekNo",this.weekNo);
      this.div.setAttribute("studentID", this.studentID);

      //makes each div's id the week number as well for easy retrieval and colouring
      //this.div.id=this.weekNo;

      this.hospitalName = "unassigned";

      this.setAssigned(false);
      this.setPseudoAssigned(false);
      this.specialtyID = "";
      this.specialtyName = "";
      this.specialtyDuration = "";

      //Using
      this.startDate = new Date();
      this.endDate = new Date();

      this.tooltipContents = [];

      this.initialiseStartDate();
      //this.initialiseEndDate();
      this.initialiseDivAttributes();
      this.displayDate();
      this.initialiseAssignedHospAttributes();

    }

    setToolTipContents(){
      /*
      var field_weekNo = "Week Number:<br>" + this.weekNo;
      var field_start_date = "Start Date:<br>" + this.returnLongFormattedDate(this.startDate);
      var field_end_date ="End Date:<br>" + this.returnLongFormattedDate(this.endDate);
      var field_specialty_name ="Specialty Name:<br>" + this.specialtyName;
      var field_hospital_name = "Hospital Name:<br>" + this.hospitalName;
      */
      this.tooltipContents = ["Week Number",this.weekNo,"Start Date",this.returnLongFormattedDate(this.startDate),"End Date",this.returnLongFormattedDate(this.endDate),"Specialty Name", this.specialtyName,"Hospital Name", this.hospitalName];

    }

    returnFormattedDate(dateObject){
      var month = dateObject.getMonth()+1;
      var day = dateObject.getDate();
      if(month<10){
        month = "0" + month;
      }
      if(day<10){
        day = "0" + day;
      }

      return day + "-" + month + "-" + dateObject.getFullYear();


    }

    returnLongFormattedDate(dateObject){
      var month = dateObject.getMonth()+1;
      var date = dateObject.getDate();
      var year = dateObject.getFullYear();
      switch(month){
        case 1:
          month = "Jan";
          break;

        case 2:
          month = "Feb";
          break;

        case 3:
          month = "Mar";
          break;

        case 4:
          month = "Apr";
          break;

        case 5:
          month = "May";
          break;

        case 6:
          month = "Jun";
          break;

        case 7:
          month = "Jul";
          break;

        case 8:
          month = "Aug";
          break;

        case 9:
          month = "Sep";
          break;

        case 10:
          month = "Oct";
          break;

        case 11:
          month = "Nov";
          break;

        case 12:
          month = "Dec";
          break;

      }

      return date +" "+month+" "+year;


    }

    //initialistaion Methods
    initialiseDivAttributes(){

      //var tooltipContents = document.createElement('p');
      this.div.style.height = '120px';
      this.div.style.padding = '10px';
      this.div.style.display = 'flex';
      this.div.style.border = "1px solid #aaaaaa";
      this.div.style.alignItems = 'center';
      //this.div.style.position = 'absolute';
      this.div.style.width = '150px'; //120
      this.div.setAttribute("id",this.studentID+"#"+this.weekNo);
      this.div.style.justifyContent = 'center';
      this.div.style.overflowWrap = 'break-word'; //Just to try and
      this.div.style.wordWrap = 'break-word'; // force the content of the div to fit
      this.div.style.hyphens = 'auto';// within the box
      this.div.style.backgroundColor = "#B8B8B8";
      this.div.style.boxShadow = "0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19)";
      this.div.style.marginBottom = "5px";
      if(this.weekNo==1){
        this.div.style.borderRadius = "15px 0 0 15px";
      }
      if(this.weekNo==52){
        this.div.style.borderRadius = "0 15px 15px 0";
      }

      //this.div.style.backgroundColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);;

      var that = this;
      //On Drop Function
      this.div.ondrop = function(ev){
//--------------------------------------

        var timeline = programmeSchedule.getTimeline( that.studentID);

 
        var specialtyDuration = parseInt(ev.dataTransfer.getData("specialtyDuration"));
        console.log("duration in ondrop timeblock: " +specialtyDuration);
        var isAssigned = false;
        var weekNo = that.weekNo;
        console.log("timeblock on drop, week No: " + weekNo);
        console.log("timeblock on drop, specialtyduration: " + specialtyDuration);
        for (let i = weekNo ; i < (weekNo + specialtyDuration) ; i++)
        {

          if (timeline.timeBlocks[i-1].getPseudoAssigned() == "true")
            {
              isAssigned = true;
            }
        }

        if(isAssigned == false)
          {
            console.log("can drop");
          }
        else 
          {
            console.log("cannot drop");
          }

//------------------------------

if(isAssigned == false)
  {
      console.log(that.weekNo);
      ev.preventDefault();

      that.showHospitalPrompt();


      //Retrieve Specialty ID
      var specialtyID = ev.dataTransfer.getData("specialtyID");

      that.specialtyID = specialtyID;
      that.findSpecialtyName();

      console.log("in timeblock ondrop: " +specialtyID);

      //Retrieve Specialty Duration
      var specialtyDuration = ev.dataTransfer.getData("specialtyDuration");
      console.log("on the drop: " +specialtyDuration);
      that.specialtyDuration = specialtyDuration;
      //console.log("Retrieved Specialty Duration: "+that.specialtyDuration);
      that.setEndDate();

      //hide the specialty so it is not re-selected-> disable that specialty div
      var specialtyName = ev.dataTransfer.getData("specialtyName");
      that.specialtyName = specialtyName;
      var currSp=document.getElementById(that.studentID+"#"+that.specialtyID+"#"+that.specialtyName);

      //change div's property
      currSp.style.cursor="not-allowed";
      currSp.style.opacity=0.3;
      //don't allow it to be dragged
      currSp.draggable=false;


      //Retrieve timebox div id
      var data = ev.dataTransfer.getData("text");


      //Put specialty div in timebox div
      ev.target.style.background = document.getElementById(data).style.background;

      //colours divs according to specialty duration
      let numDivSpan=that.div.getAttribute("weekNo");
      let colorVal;//, specialtyN;
      for (let i=0;i<that.specialtiesArr.length;i++){
        //ensure that div is colour of specialty it is assigned to
        if (that.specialtiesArr[i].specialtyID==that.specialtyID){
          colorVal=that.specialtiesArr[i].color;
          break;
        }

      }


    //change colours of amount of divs of specialty duration
      for (let i =  numDivSpan; i < parseInt(numDivSpan)+parseInt(specialtyDuration); i++) {
        //TODO: CAN CHANGE OTHER ATTRIBUTES OF THE OTHER DIVS- CHANGE ITS SPECIALTY ID ETC ETC
        var currDivID = that.studentID+"#"+i;
        //console.log("TempID is: "+tempID);

        var currDiv = document.getElementById(currDivID);
        currDiv.style.background = colorVal;
        currDiv.setAttribute("pseudo_assigned",true);

        //document.getElementById(i).ondrop(ev);


        //CHANGE TEXT OF DIV- currently buggy as when text is changed, div moves downwards
         document.getElementById(currDivID).style.wordBreak="break-all";
        // document.getElementById(i).innerHTML=specialtyN;
      }

      //Once assigned, allow for modal box to appear
      ev.target.setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
      ev.target.setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id
      that.assigned = true;
      that.setToolTipContents();

//     //var hospital = prompt("please enter hospital", "vic");

//   //Added here
//         var disName = document.createElement('p'); // Text within the div
//         disName.innerHTML = String(that.specialtyName);
//         disName.style.fontSize = "small";
//         disName.style.color = 'white';
//         that.div.appendChild(disName);
// //Just Check
      that.setPseudoAssigned(true) ;
      that.setAssigned(true);


    }
      };

      //DragOver function
      this.div.ondragover = function(ev){

        //change cursor to hand pointer after dragging specialty block onto div



        var isAssigned = that.getPseudoAssigned();
        if (isAssigned == "false")
          {
            console.log("ondragover: unassigned");
        that.div.style.cursor="pointer";
        ev.preventDefault();

          }


      };

      //These are extra functions to try and fix the modal box not appearing after moving specialty div around
      //OnDragLeave function
      this.div.ondragleave = function(ev){
        //Hide Modal Box
        ev.target.setAttribute("data-toggle",""); // defining the click to bring up the modal box
        ev.target.setAttribute("data-target",""); // setting the target to the modals id

      };
      //OnDragEnter Function
      this.div.ondragenter = function(ev){
        //Show Modal Box
        ev.target.setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
        ev.target.setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id
        ev.target.setAttribute("student","studentValue");


      };

      //Not sure why we need this but we do need it for things to work. Fix this later.
      this.div.onclick = function(ev){
        if (that.getPseudoAssigned())
          {
            that.div.style.cursor="pointer";
            //This code runs for a TimeBlock when a SpecialtyBlock is dropped onto it
            var drop = document.getElementById('hospital_id');

            drop.setAttribute("weekNo",this.getAttribute("weekNo"));
            drop.setAttribute("studentID", this.getAttribute("studentID"));

            drop.setAttribute("timeBlock", this.getAttribute("timeBlock"));

            drop.setAttribute("specialtyID", ev.target.getAttribute("specialtyID"));

        }
      }

      var tooltip = document.getElementById('timeBlockPopUp');
      tooltip.style.display = "none";

      var that = this;

      this.div.onmouseenter = function(ev){
        if(that.assigned==true){
          tooltip.style.display = "block";
          var tooltipContents = document.createElement('p');

          var heading = document.createElement('h4');
          heading.classList.add('heading');
          heading.innerHTML = "Schedule Information<br><br>";
          tooltipContents.appendChild(heading);

          for(var i = 0; i<that.tooltipContents.length;i++){



            //Field Information
            if(i%2==0){
              var field = document.createElement('h6');
              field.classList.add('field_heading');
              field.style.margin = "0px";
            }
            //Field Headings
            else{
              var field = document.createElement('p');
              field.classList.add('field_info');
             }


            field.innerHTML = that.tooltipContents[i];
            tooltipContents.appendChild(field);
          }

          tooltip.appendChild(tooltipContents);
        }
      }

      this.div.onmouseleave = function(ev){
        document.body.style.cursor = "default";
        if(that.assigned==true){
          //document.body.style.cursor = "default";
          tooltip.innerHTML = "";
          tooltip.style.display = "none";
        }
      }


    }

    initialiseStartDate(){
      this.startDate.setMonth(0);
      this.startDate.setDate(1+(7*(this.weekNo-1)));
    }

    setEndDate(){
      //Start at start date
      this.endDate.setMonth(0);
      this.endDate.setDate(1+(7*(this.weekNo-1)));

      //Move to end date
      var duration = parseInt(this.specialtyDuration.charAt(0));
      this.endDate.setDate(this.endDate.getDate()+(duration*7)); //Day just before the start of the next week
    }

    initialiseAssignedHospAttributes(){
      //this.assigned_hosp.style.textAlign = "center"
      //p.style.width = "100%";
      //this.div.appendChild(document.createElement('br')); //put space first
      //this.div.appendChild(this.assigned_hosp);
    }

    //Other Class Methods

    displayDate(){
      var temp = document.createElement('div');
      var p = document.createElement('p');


      p.setAttribute('id','start_date');
      temp.style.textAlign = "center"
      temp.style.width = "100%";
      temp.style.borderRadius= "25px";
      temp.style.background = "#FFFFFF";
      temp.style.boxShadow = "0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19)";
      //temp.style.backgroundColor = '#'+(Math.random()*0xFFFFFF<<0).toString(16);
      p.style.color = "black";

      p.innerHTML =  this.returnFormattedDate(this.startDate);

      temp.appendChild(p);
      this.div.appendChild(temp);
      //this.div.appendChild(document.createElement('br'));
    }

    removeChildDiv(){
      console.log("TRYING TO REMOVE CHILD");
      this.div.firstChild.remove();
      console.log("CHILD REMOVED\n");
    }

    showHospitalPrompt(){

      this.removeChildDiv();

      var temp = document.createElement('div');
      var p = document.createElement('p');


      p.setAttribute('id','hospital_prompt');
      temp.style.textAlign = "center"
      temp.style.width = "100%";
      temp.style.borderRadius= "25px";
      temp.style.background = "#FFFFFF";
      temp.style.boxShadow = "0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19)";
      //temp.style.margin = "5px";
      p.style.color = "black";
      p.style.marginTop = "20px";
      p.innerHTML =  "Click to choose a hospital";

      temp.appendChild(p);
      this.div.appendChild(temp);
      //this.div.appendChild(document.createElement('br'));
    }



    setHospitalName(){
      <% @hospitals.each do |hospital| %>
        if(<%=hospital.id%> == this.hospitalID){
          this.hospitalName = <%=raw(Hospital.where(id: hospital.id).pluck(:hospital_name))%>;
          console.log("FOUND HOSPITAL NAME TO BE: "+this.hospitalName);
        }
      <%end%>
    }

    findSpecialtyName(){
      <% @specialties.each do |specialty| %>
        if(<%=specialty.id%> == this.specialtyID){
          this.specialtyName = <%=raw(Specialty.where(id: specialty.id).pluck(:SpecialtyName))%>;
        }
      <%end%>
    }

    showHospitalName(){
      var hospitalName = "unassigned";
      this.removeChildDiv();

      <% @hospitals.each do |hospital| %>
        if(<%=hospital.id%> == this.hospitalID){
          hospitalName = <%=raw(Hospital.where(id: hospital.id).pluck(:hospital_name))%>;
        }
      <%end%>


      //Create a div with the hospital name
      var temp = document.createElement('div');
      var p = document.createElement('p');

      p.setAttribute('id','start_date');
      temp.style.textAlign = "center"
      temp.style.width = "100%";
      temp.style.borderRadius= "25px";
      temp.style.background = "#FFFFFF";
      temp.style.boxShadow = "0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19)";

      p.style.color = "black";
      p.style.marginTop = "20px";
      p.innerHTML =  hospitalName;

      temp.appendChild(p);
      this.div.appendChild(temp);

      this.hospitalName = hospitalName;

    }



    //Getter and Setter Methods
    getStartDate(){
      return this.returnLongFormattedDate(this.startDate);
    }

    getEndDate(){
      return this.returnLongFormattedDate(this.endDate);
    }

    getHospitalName(){
      return this.hospitalName;
    }

    getSpecialtyName(){
      return this.specialtyName;
    }

    getDivID(){
      return this.div.id;
    }

    getHospitalID(){
      return this.hospitalID;
    }

    getSpecialtyDuration(){
      return this.specialtyDuration;
    }

    getWeekNo(){
      return this.weekNo;
    }

    getDiv(){
      return this.div;
    }

    getSpecialtyID(){
      return this.specialtyID;
    }

    getPseudoAssigned()
    {
      return this.div.getAttribute("pseudo_assigned");
    }

    getAssigned(){
      return this.div.getAttribute("assigned");
    }

    setSpecialtyID(specialtyID){
      this.specialtyID = specialtyID;
    }

    setSpecialtyName(specialtyName){
      this.specialtyName = specialtyName;
    }

    setSpecialtyDuration(specialtyDuration){
      this.specialtyDuration = specialtyDuration;
    }

    setAssigned(value){
      this.assigned = value;
      this.div.setAttribute("assigned",value);
    }

    setPseudoAssigned(value){
      this.div.setAttribute("pseudo_assigned",value);
    }

    setHospitalID(hospitalID){
      this.hospitalID = hospitalID;
    }



   }

  class Schedule{
     constructor(){
       this.studentID = "";
       this.weekNo = "";
       this.specialtyID = "";
       this.hospitalID = "";
       this.specialtyDuration = "";
     }

     setStudentID(studentID){
       this.studentID = studentID;
     }

     setWeekNo(weekNo){
       this.weekNo = weekNo;
     }

     setSpecialtyID(specialtyID){
       this.specialtyID = specialtyID;
     }

     setHospitalID(hospitalID){
       this.hospitalID = hospitalID;
     }

     setSpecialtyDuration(specialtyDuration){
       this.specialtyDuration = specialtyDuration;
     }

     getSpecialtyDuration(){
       return this.specialtyDuration;
     }

     getWeekNo(){
       return this.weekNo;
     }

     getStudentID(){
       return this.studentID;
     }

     getSpecialtyID(){
       return this.specialtyID;
     }

     getHospitalID(){
       return this.hospitalID;
     }



    }

  class SpecialtyBlock{
      constructor(specialtyID,specialtyName,specialtyDuration,studentID,color){
        this.div = document.createElement('div');
        this.specialtyID = specialtyID;
        this.div.setAttribute("specialtyID", specialtyID);
        this.specialtyName = specialtyName;
        this.specialtyDuration = specialtyDuration;
        this.specialtyID=specialtyID;
        this.color = color;
        //For div ID
        this.studentID = studentID;
        this.div.setAttribute("id",this.studentID+"#"+this.specialtyID+"#"+this.specialtyName);

        this.initialiseDivAttributes();
      }

      initialiseDivAttributes(){
        //Set div attributes
        var nameDiv = document.createElement('div');
        nameDiv.style.alignItems = 'center';
        nameDiv.style.justifyContent = 'center';
        nameDiv.style.margin = "auto auto";
        var temp = document.createElement('p');
        temp.style.textAlign = "center";
        temp.style.alignItems = "center";
        temp.style.textShadow =  "1px 1px 1px #000000";

        //temp.width = "wrap-text";
        temp.innerHTML = this.specialtyName;
        nameDiv.appendChild(temp);

        this.div.appendChild(nameDiv);
        //this.div.innerHTML = this.specialtyName;
        this.div.style.textAlign = 'center';
        //this.div.style.width = "100px";
        this.div.style.width = (100*this.specialtyDuration) +'px';
        console.log("Specialty Duration is: "+this.specialtyDuration);
        console.log("This is the divs width: "+ (100*this.specialtyDuration) +'px');
        this.div.style.height = '30px';
        this.div.style.display = 'flex';
        this.div.style.border = "1px solid #aaaaaa";
        this.div.style.alignItems = 'center';
        this.div.style.background = this.color;
        this.div.style.color = "white"
        this.div.style.borderRadius= "10px";
        this.div.style.boxShadow = "0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19)";
        this.div.style.marginBottom = "5px";

        //change cursor
        this.div.style.cursor="pointer";

        this.div.setAttribute("draggable","true");
        //On dragstart function
        var that = this;
        this.div.ondragstart = function(ev){


          //Transfer div id
          ev.dataTransfer.setData("text", ev.target.id);
          //Transfer SpecialtyID
          console.log("in ondragstart specialty: "+ that.specialtyID);
          ev.dataTransfer.setData("specialtyID", that.specialtyID);

          //Transfer Specialty Duration

          ev.dataTransfer.setData("specialtyDuration", that.specialtyDuration);
          ev.dataTransfer.setData("specialtyName", that.specialtyName);


        };

        this.div.ondrag = function(ev){
          console.log("dragging");
          //ev.preventDefault();
          //document.body.style.cursor = 'none';

        };
/*
        this.div.ondrop = function(ev){
          console.log("in specialty drop: " +this.getAttribute("specialtyID"));


          //don't allow specialty to drop

          ev.target.setAttribute("specialtyID",this.getAttribute("specialtyID"));



          //allow specialty to drop if it isn't in the divs already

        };
*/


      }

      getSpecialtyName(){
        return this.specialtyName;
      }

      getSpecialtyDuration(){
        return this.specialtyDuration;
      }

      getDiv(){
        return this.div;
      }

     }

  class ProgrammeSchedule{
        constructor(parentObject){
          this.programmeCode = "i am the code";
          this.parentObject = parentObject;
          this.timelines =[];
          this.initialiseTimelines();
          this.populateSchedule();
        }

        getTimeline(student_id)
        {
          var timelines = this.timelines;
          var size = timelines.length;
      
          var timeline;
          for (let i = 0 ; i < size; i++)
          {
            timeline = timelines[i];
            if (timeline.studentID == student_id)
              {
                break;
              }
          }
      
          return timeline;
      
      
        }

        getTimeBlock(week_no,student_id)
        {
      
        var timeline = this.getTimeline(student_id);
        var size = timeline.timeBlocks.length;
         
          var timeblock;
          for (let i = 0 ; i < size; i++)
          {
            timeblock = timeline.timeBlocks[i];
            if (timeblock.weekNo == week_no)
              {
                break;
              }
          }
      
          return timeblock;
      
        }


        //Create a number of timelines for each student in the programme
        initialiseTimelines(){

          <% @students.each do |student| %>
            var student_user_id = "<%=student.user_id%>";
            var student_name = "student";                     //default name incase of errors
            <% @all_users.each do |user| %>                 // search for user
                if(student_user_id == <%=user.id%>){
                    student_name = "<%=user.user_LastName%>" +", "+ "<%=user.user_FirstName%>";
                }
            <%end%>
            this.timelines.push(new Timeline(<%=student.id%>, student_name, <%=student.studentNumber%>));
          <%end%>
        }

        saveSchedule(){
          console.log("Trying to save schedule");
          //For each timeline
          for(var i =0; i<this.timelines.length; i++){
            console.log("Checking timline no: "+i);
            var currSchedule = this.timelines[i].getSchedules();
            console.log("Number of schedules for timeline: "+currSchedule.length);
            //For each schedule in a timeline
            for(var j =0; j<currSchedule.length;j++){
              console.log("Check schedule no: "+j);
              var studentID = currSchedule[j].getStudentID();
              var weekNo = currSchedule[j].getWeekNo();
              var specialtyID = currSchedule[j].getSpecialtyID();
              var specialtyDuration = currSchedule[j].getSpecialtyDuration();
              var hospitalID = currSchedule[j].getHospitalID();
              console.log("Saving new Schedule to database");
              console.log("Student ID to save: " +studentID);
              console.log("Week No to save: " +weekNo);
              console.log("Specialty ID to save: " +specialtyID);
              console.log("Specialty Duration to save: " +specialtyDuration);
              console.log("Hospital ID to save: " +hospitalID);
              console.log("");
              //console.log("Schedule information is: "+studentID+" "+weekNo+" "+specialtyID+" "+specialtyDuration+" "+hospitalID);
              //TODO: Save this schedule to the Database
              //calls function to do an ajax req
              //still need to update parameters and fix Db table
              //console.log(hospitalID);
              SaveRecord(studentID,specialtyID,weekNo,specialtyDuration,hospitalID);


            }
          }
        }

        //Populate Schedule with existing schedules from the database
        populateSchedule(){

          var table = document.createElement('table');
          for(var i = 0; i<this.timelines.length; i++){
            var br = document.createElement('br'); //Front-end
            table.appendChild(br); //Front-end

            var tr = this.timelines[i].displayTimeline();

            table.appendChild(tr);

            table.appendChild(br); //Front-end
          }
          //timeLineDiv.appendChild(table);
          this.parentObject.appendChild(table);

          for(var i = 0; i<this.timelines.length; i++){
            this.timelines[i].initialiseSchedules();
          }

        }

      }


  //Create a new programme schedule for a specific programme
  var programmeSchedule = new ProgrammeSchedule(document.getElementById('schedule_window'));
  var chosen_hospital_id = 0;


  function obtainUserName(studentID){
    var fName, lName;
     <%@students.each do |student|%>
            if (studentID=="<%=student.id%>"){ 

              var fName= "<%= User.where(:id => student.user_id).pluck(:user_FirstName).first%>";    
              var lName= "<%= User.where(:id => student.user_id).pluck(:user_LastName).first%>"; 
              return fName+" "+lName;     
           
            }
    <%end%>
    
    return;
  }

  function obtainSpecialtyName(specId){
     <%@specialties.each do |specialty|%>
            if (specId=="<%=specialty.id%>"){ 

              return "<%=specialty.SpecialtyName%>";     
            }
    <%end%>
    
    return;
  }

  function obtainHospitalName(hospId){
     <%@hospitals.each do |hospital|%>
            if (hospId=="<%=hospital.id%>"){ 

              return "<%=hospital.hospital_name%>";     
            }
    <%end%>
    
    return;
  }

//onclick function to save all the schedules to the database
  function makeChanges(){
    programmeSchedule.saveSchedule();
    window.location.reload();
  }


  function loadModalInfo(){
    //remove previous info 
     $("#modalContent").children().remove();
    //TODO: Add animation to it later
     
            


     //modal's contents
     var divOuter=document.getElementById("modalContent");
      let count=0;
        for(var i =0; i<programmeSchedule.timelines.length; i++){
            var currSchedule = programmeSchedule.timelines[i].getSchedules();
            //For each schedule in a timeline
            if (currSchedule.length>0){
              count=1;
              break;
            }
        }

    //if there were no saved changes
     if (count===0){
      divOuter.innerHTML="There are currently no pending changes.";

     }else{
      divOuter.innerHTML="";
      
       //display schedule info
        for(var i =0; i<programmeSchedule.timelines.length; i++){
            var currSchedule = programmeSchedule.timelines[i].getSchedules();
            //For each schedule in a timeline
            for(var j =0; j<currSchedule.length;j++){
              var studentID = currSchedule[j].getStudentID();
              var weekNo = currSchedule[j].getWeekNo();
              var specialtyID = currSchedule[j].getSpecialtyID();
              var specialtyDuration = currSchedule[j].getSpecialtyDuration();
              var hospitalID = currSchedule[j].getHospitalID();

              //get the details so that user cannot access ID
              let studName=obtainUserName(studentID);
              let specName=obtainSpecialtyName(specialtyID);
              let hospName= obtainHospitalName(hospitalID);

              if (document.getElementById("div"+studentID)!=null){
                var tmpDiv=document.getElementById("div"+studentID);
                var divInner2=document.createElement("div");
                divInner2.className="card card-body my-1 border border-secondary ";
                divInner2.innerHTML="Week: "+weekNo+" \t|\t Duration: "+specialtyDuration+" weeks \t|\t Specialty: "+specName+"\t|\t Hospital: "+hospName;
                tmpDiv.appendChild(divInner2);
              }else{
             
              //extra div for styling
                var divOuter1= document.createElement("div");
                
                divOuter1.className="card card-body my-1 border border-primary rounded-0";
                divOuter1.id="div"+studentID;
                //when we make it clickable we can do the ffg
                // divOuter.style.cursor="pointer";
                // divOuter1.id="card"+j;
                
                divOuter1.innerHTML="<b>"+studName.toUpperCase()+"</b>";
                var divInner=document.createElement("div");
                divInner.className="card card-body my-1 border border-secondary ";
                divInner.innerHTML="Week: "+weekNo+" \t|\t Duration: "+specialtyDuration+" weeks \t|\t Specialty: "+specName+" \t|\t Hospital: "+hospName;
                divOuter1.appendChild(divInner);
                divOuter.appendChild(divOuter1);
              }
          }
        }
        
     }
     //add new changes info
  }
  //onclick function to assign student to hospital
  function assignHospital(){


    var drop = document.getElementById('hospital_id');
    var hospitalName = drop.options[drop.selectedIndex].text;

    var alertBox = document.getElementById('showAssign');
    alertBox.style.display = "block";
    alertBox.innerHTML = "Student successfully assigned to " + hospitalName + "!"; //Changing the content of the Div to display assigned student

    //Wait 5 seconds then remove the alert box
    setTimeout(function () {
      alertBox.style.display = "none";
    }, 5000);

    var hospital_id = drop.options[drop.selectedIndex].value;
    chosen_hospital_id = hospital_id;
    var week_no = drop.getAttribute("weekNo");
    var student_id = drop.getAttribute("studentID");

    var timeblock = programmeSchedule.getTimeBlock(week_no,student_id);

    var timelines = programmeSchedule.timelines;
    var size = timelines.length;

    var timeline;
    for (let i = 0 ; i < size; i++)
    {
      timeline = timelines[i];
      if (timeline.studentID == student_id)
        {
          break;
        }
    }

    var timeblock;
    for (let i = 0 ; i < 52; i++)
    {
      timeblock = timeline.timeBlocks[i];
      if (timeblock.weekNo == week_no)
        {
          break;
        }
    }

    //timeblock.removeChildDiv();

    //timeblock.hospitalID = hospital_id;
    timeblock.setHospitalID(hospital_id);

    //timeblock.findHospitalName();
    //timeblock.assigned_hosp.innerHTML = hospitalName;

    //to add hospital name to extra timeblocks according to specailty duration
    specialty_duration = timeblock.specialtyDuration;


    timeblock.showHospitalName();
    timeblock.setToolTipContents(); // Need to set tooltip contents because the hospitalID was updated

    //this.div.appendChild(document.createElement('br'));

    //timeblock.div.innerHTML = hospitalName;


    console.log("Hospital ID is: " +drop.options[drop.selectedIndex].value); //HospitalID
    console.log("weekNo is: " +drop.getAttribute("weekNo"));
    console.log("studentid is: " + drop.getAttribute("studentID"));
    console.log("in hos assign: " + timeblock.hospitalID);

  }





  //need to change the params for rotation to weekno and add specialtyduration
  function SaveRecord(studentID,specialtyID,weekNo,specialtyDuration, hospitalID){

  //TODO:if this ends up reloading page, also ensure that specialties that are present in the schedule cannot be readded
  console.log("specialtyID in SaveRecord: " +specialtyID);
    $.post("/schedules",
    {
    student_id: studentID,
    specialty_id: specialtyID,
    hospital_id: hospitalID,
    week_no: weekNo,
    specialty_duration: specialtyDuration
    });
  }

 </script>



  <!---------------------------------------------------------------------------------------------->




</div>

<br>

<br>
<br>
</div>
