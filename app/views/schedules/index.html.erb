
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js"></script>

<!-- Div to display alerts when studnets are assigned -->
<div id="showAssign" class="alert alert-primary" role="alert">

</div>

<div id="sizingDiv" style="text-align:center">
<br></br>
<h1>Manage Schedules</h1>

<br>

<!-- Vertically centered modal -->
<div class="modal fade" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">SELECT HOSPITAL</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <em>Assign Student To A Hospital Below:</em>

        <br>
        <br>

        <!--Dropdown for hospitals -->
        <select name="hospital_drop" id="hospital_id"  class="btn btn-secondary dropdown-toggle">
        <%= options = options_from_collection_for_select(Hospital.all, 'id', 'hospital_name') %>
        </select>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="assignHospital()" data-dismiss="modal">Confirm</button>
      </div>
    </div>
  </div>
</div>


<br>

<div class="container-fluid">
    <div class="d-flex justify-content-evenly">

    </div>
</div>

<!-- Add search forms for OWN model -->
<!-- unless statement takes out search bar when editing,creating,etc-->
<% unless url_for != users_path %>
<!--Makes the seach field neater however cant find a way to pull search field to  right of navbar -->
  <form class="form-inline my-2 my-lg-0">
      <%=render "users/filters"%>
  </form>
<% end %>
<!--ADD Below check users controller and -filters.html.erb for eg -->




<form action="/schedules">
<label> <h5>Select Programme Code</h5> </label>
<br>
<select name="programme_id" id="programme_id" onchange="this.form.submit()" class="btn btn-primary dropdown-toggle">
<%= options = options_from_collection_for_select(Programme.all, 'id', 'programme_code',@current_programme_id) %>
</select>
</form>
<br></br>
<button type="button" class="btn btn-primary" onclick="makeChanges()">Make Changes</button>
<!-- Some functions for the Drag and Drop Feature -->


<%# centers div %>
<div class="mt-4 d-flex justify-content-center" id="schedule_window">


<script>

/*Note: Here is a rough hierarchical structure of the classes:

(-->: uses)

ProgrammeSchedule-->Timeline
Timeline-->TimeBlock
Timeline-->SpecialtyBlock
Timeline-->Schedule

*/


  class Timeline{
    constructor(studentID, studentName, studentNumber){
        this.studentID = studentID;
        this.studentName = studentName;
        this.studentNumber = studentNumber;
        this.specialties = [];
        this.hospitals = [];
        this.timeBlocks = [];

        this.schedules = [];
        this.colour_pallette = ["#04b8a9", "#b80453", "#f9f60d", "#0df915", "#fdd64d", "#b4dbdd", "indigo"];
        this.initialiseSpecialties();
        this.initialiseTimeBlocks(this.specialties, studentID);


        //this.initialiseSchedules();


        //This button acts as an event so that the array of schedules can be poppulated
        this.btnSaveToChanges = document.createElement('button');
        this.btnSaveToChanges.innerHTML = "Save to changes";
        this.btnSaveToChanges.setAttribute("class","btn btn-outline-success");

        //When Save to Changes is clicked, populate schedules with all current schedules in timeline - checks each timebox.
        var that = this;
        this.btnSaveToChanges.onclick = function(ev){
          this.schedules = [];
          //console.log("StudentID is: " + that.studentID);
          for(var i=0; i<52;i++){
            if(that.timeBlocks[i].getAssigned()==true){
              console.log("Create a new schedule in the timeline");
              var newSchedule = new Schedule();
              newSchedule.setWeekNo(that.timeBlocks[i].getWeekNo());
              newSchedule.setSpecialtyID(that.timeBlocks[i].getSpecialtyID());
              console.log("in btnSaveToChange: " + that.timeBlocks[i].getSpecialtyID());
              newSchedule.setStudentID(that.studentID);
              newSchedule.setSpecialtyDuration(that.timeBlocks[i].getSpecialtyDuration());
              //console.log("save clicked, hospitalID is : " +that.timeBlocks[i].hospitalID)
              //TODO: Set Hospital ID
              newSchedule.setHospitalID(that.timeBlocks[i].getHospitalID());

              //console.log("timeline constructor")
              //console.log(that.timeBlocks[i].getSpecialtyID());
              //console.log("timeline constructor")


              that.schedules.push(newSchedule);
            }

          }
        };


    }

    initialiseTimeBlocks(specialties,studentID){
      for(var i =0; i<52; i++){
        var timeBlock = new TimeBlock(i+1, studentID, specialties);
        //console.log("Initialised Timeblock no: "+i);
        this.timeBlocks.push(timeBlock);
      }
    }



    //TODO: Fetch Specialty Name and Duration
    initialiseSpecialties(){
      var index = 0;
      <% @specialties.each do |specialty| %>
        var color = this.colour_pallette[index];

        var progsId=<%=@current_programme_id%>;
        var weeks=<%=CourseSpecialty.where(course_id: @programme_courses).where( specialty_id: specialty).pluck(:weeks)%>
        var specialtyBlock = new SpecialtyBlock(<%= specialty.id %>, "<%= specialty.SpecialtyName %>", weeks, this.studentID, color);
        this.specialties.push(specialtyBlock);
        index = index + 1;
      <%end%>

      console.log(this.specialties);
    }

    //TODO: Populate schedule array with any existing schedules, for that student, found in the database.
    initialiseSchedules(){
      console.log("Initialising Schedules");
      <% @schedules.each do |schedule| %>
        if(<%=schedule.student_id%>==this.studentID){
          //console.log("StudentID is: "+this.studentID);
          console.log("Matched :" + <%=schedule.student_id%> + " AND "+this.studentID);
          var currentSchedule = new Schedule();

          //console.log("Week No:"  + <%=schedule.week_no%>);
          currentSchedule.setWeekNo(<%=schedule.week_no%>); //THIS ISN"T WORKING FOR SOME REASON NB NB NB
          currentSchedule.setHospitalID(<%=schedule.hospital_id%>);
          currentSchedule.setSpecialtyID(<%=schedule.specialty_id%>);
          currentSchedule.setSpecialtyDuration(<%=schedule.specialty_duration%>);

          this.showScheduleOnTimeline(currentSchedule);

        }

      <% end %>
    }

    //Show the schedule object on the timeline
    showScheduleOnTimeline(schedule){
      //this.timeBlocks[schedule.getWeekNo()-1].setAssigned(true);
      var weekNo = schedule.getWeekNo();
      console.log("Week no is: "+weekNo);

      var timeBlock = this.timeBlocks[weekNo-1];

      //Retrieve Specialty ID
      var specialtyID = schedule.getSpecialtyID();
      console.log("The time blocks are: "+ timeBlock);
      //this.timeBlocks[weekNo-1].setSpecialtyID(specialtyID);


      //Retrieve Specialty Duration
      var specialtyDuration = schedule.getSpecialtyDuration();
      this.timeBlocks[weekNo-1].setSpecialtyDuration(specialtyDuration);

      //Retrieve timebox div id
      var data = this.timeBlocks[weekNo-1].getDivID();

      //Put specialty div in timebox div
      //ev.target.appendChild(document.getElementById(data));
      this.timeBlocks[weekNo-1].getDiv().style.background = document.getElementById(data).style.background;
     // ev.target.innerHTML = document.getElementById(data).innerHTML;

      //colours divs according to specialty duration
      let numDivSpan = this.timeBlocks[weekNo-1].getDiv().getAttribute("weekNo");
      let colorVal, specialtyN;
      for (let i=0;i<this.specialties.length;i++){
        //ensure that div is colour of specialty it is assigned to
        if (this.specialties[i].specialtyID==specialtyID){
          colorVal=this.specialties[i].color;
          specialtyN=this.specialties[i].getSpecialtyName();
          break;
        }
      }


    //change colours of amount of divs of specialty duration
      for (let i =  numDivSpan; i < parseInt(numDivSpan)+parseInt(specialtyDuration); i++) {
        //TODO: CAN CHANGE OTHER ATTRIBUTES OF THE OTHER DIVS- CHANGE ITS SPECIALTY ID ETC ETC
        var currDivID = that.studentID+"#"+i;
        //console.log("TempID is: "+tempID);
        document.getElementById(currDivID).style.background= colorVal;

      }

      //Once assigned, allow for modal box to appear
      this.timeBlocks[weekNo-1].getDiv().setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
      this.timeBlocks[weekNo-1].getDiv().setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id
    //var hospital = prompt("please enter hospital", "vic");

      this.timeBlocks[weekNo-1].setAssigned(true);

    }

    //Remove Schedule for a weekNo
    removeSchedule(weekNo){
      for(var i = 0; i< this.schedules.length; i++){
        if(this.schedules[i].getWeekNo()==weekNo){
          this.schedules.splice(i,1);
        }
      }
    }

    //Return array of schedules
    getSchedules(){
      return this.schedules;
    }

    displayTimeline(){

      //Main Table
      var table = document.createElement('table');
      table.setAttribute("border","border:1px solid gray");
      table.style.background = "#f5f7f7";

      //Spacing
      var br = document.createElement('br');
      table.appendChild(br);
      //Spacing

      //Add student information
      var studentInformation = [this.studentName, this.studentNumber];
      for(var i = 0 ;i<studentInformation.length;i++){
        var tr = document.createElement('tr');
        var h5 = document.createElement('h5');
        h5.innerHTML = studentInformation[i];
        //console.log("Student Info: " + p.innerHTML);
        var td = document.createElement('td');
        //td.style.align="left";
        td.appendChild(h5);
        tr.appendChild(td);
        table.appendChild(tr);
      }

      //Add Specialties for students
      //console.log("Length of specialties is: "  + this.specialties.length);
      for(var i = 0; i<this.specialties.length;i++ ){
        //console.log("Added this specialty: "+i);
        var tr = document.createElement('tr');
        var td = document.createElement('td');
        td.appendChild(this.specialties[i].getDiv());
        tr.appendChild(td);
        table.appendChild(tr);
      }



      //Visual timeline
      //52 divs - Timeblocks
      var tr = document.createElement('tr');
      for(var i = 0; i<52; i++){
        var p = document.createElement('p');
        //p.innerHTML = studentInformation[i];
        var td = document.createElement('td');
        td.appendChild(this.timeBlocks[i].getDiv());
        tr.appendChild(td);
      }

      //Container for 52 Timeblocks
      var container = document.createElement('div');
      container.appendChild(tr);
      container.appendChild(document.createElement('br'));
      //Need to dynamically set the width and height in the future (So the timeline adjusts size with the window size of the browser)
      //Note: I think we need to use window.InnerWidth and window.InnerHeight here but we'll come back to this at some point.
      container.style.height = "50%";
      //was 1800px before. Now it is 95 percent of the viewport
      container.style.width="95vw";
      container.style.overflow = 'overlay';
      container.style.alignItems = 'center';
      var tr = document.createElement('tr');
      tr.appendChild(container);
      table.appendChild(tr);

      //Spacing
      var br = document.createElement('br');
      table.appendChild(br);
      //Spacing

      //Button to update Schedule
      var tr = document.createElement('tr');
      tr.appendChild(this.btnSaveToChanges);
      table.appendChild(tr);

      //Spacing
      var br = document.createElement('br');
      table.appendChild(br);
      //Spacing

      return table; //Return row which corresponds to a student's timeline
      //Append to main document
     //this.parentObject.appendChild(table);

    }


  }

  class TimeBlock {
    constructor(weekNo,studentID, specialties){


      this.weekNo = weekNo;
      this.studentID = studentID;
      this.hospitalID = 0;
      this.specialtiesArr=specialties;
      this.div = document.createElement('div');
      this.assigned_hosp = document.createElement('p');

      this.div.setAttribute("weekNo",this.weekNo);
      this.div.setAttribute("studentID", this.studentID);

      //makes each div's id the week number as well for easy retrieval and colouring
      //this.div.id=this.weekNo;


      this.assigned = false;
      this.specialtyID = "";
      this.specialtyDuration = "";

      //Not really using right now
      this.startDate = new Date();
      this.endDate = new Date();


      this.initialiseStartDate();
      this.initialiseEndDate();
      this.initialiseDivAttributes();
      this.displayDate();
      this.initialiseAssignedHospAttributes();

    }

    initialiseDivAttributes(){


      this.div.style.height = '120px';
      this.div.style.padding = '10px';
      this.div.style.display = 'flex';
      this.div.style.border = "1px solid #aaaaaa";
      this.div.style.alignItems = 'center';
      this.div.style.width = '150px'; //120
      this.div.setAttribute("id",this.studentID+"#"+this.weekNo);
      //console.log("Div ID is set to: "+this.studentID+"#"+this.weekNo )


      var that = this;
      //On Drop Function
      this.div.ondrop = function(ev){
      console.log(that.weekNo);
      ev.preventDefault();

      //Retrieve Specialty ID
      var specialtyID = ev.dataTransfer.getData("specialtyID");
      that.specialtyID = specialtyID;

      console.log("in timeblock ondrop: " +specialtyID);

      //Retrieve Specialty Duration
      var specialtyDuration = ev.dataTransfer.getData("specialtyDuration");
      that.specialtyDuration = specialtyDuration;
      // console.log("Received specialty duration: "+specialtyDuration);



      //Value that's passed
      //console.log("Sent value is: " + specialtyID);

      //Retrieve timebox div id
      var data = ev.dataTransfer.getData("text");

      //Put specialty div in timebox div
      //ev.target.appendChild(document.getElementById(data));
      ev.target.style.background = document.getElementById(data).style.background;
     // ev.target.innerHTML = document.getElementById(data).innerHTML;



      //colours divs according to specialty duration
      let numDivSpan=that.div.getAttribute("weekNo");
      let colorVal;//, specialtyN;
      for (let i=0;i<that.specialtiesArr.length;i++){
        //ensure that div is colour of specialty it is assigned to
        if (that.specialtiesArr[i].specialtyID==that.specialtyID){
          colorVal=that.specialtiesArr[i].color;
         // specialtyN=that.specialtiesArr[i].getSpecialtyName();
          break;
        }
      }


    //change colours of amount of divs of specialty duration
      for (let i =  numDivSpan; i < parseInt(numDivSpan)+parseInt(specialtyDuration); i++) {
        //TODO: CAN CHANGE OTHER ATTRIBUTES OF THE OTHER DIVS- CHANGE ITS SPECIALTY ID ETC ETC
        var currDivID = that.studentID+"#"+i;
        //console.log("TempID is: "+tempID);
        document.getElementById(currDivID).style.background= colorVal;

        //document.getElementById(i).ondrop(ev);


        //CHANGE TEXT OF DIV- currently buggy as when text is changed, div moves downwards
         document.getElementById(currDivID).style.wordBreak="break-all";
        // document.getElementById(i).innerHTML=specialtyN;
      }

      //Once assigned, allow for modal box to appear
      ev.target.setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
      ev.target.setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id
    //var hospital = prompt("please enter hospital", "vic");

      that.assigned = true;

      };

      //DragOver function
      this.div.ondragover = function(ev){
        ev.preventDefault();


      };

      //These are extra functions to try and fix the modal box not appearing after moving specialty div around
      //OnDragLeave function
      this.div.ondragleave = function(ev){
        //Hide Modal Box
        ev.target.setAttribute("data-toggle",""); // defining the click to bring up the modal box
        ev.target.setAttribute("data-target",""); // setting the target to the modals id
        that.assigned = false;
      };
      //OnDragEnter Function
      this.div.ondragenter = function(ev){
        //Show Modal Box
        ev.target.setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
        ev.target.setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id
        ev.target.setAttribute("student","studentValue");



        that.assigned = true;
      };

      //
      this.div.onclick = function(ev){
        if (that.assigned)
          {

            //This code runs for a TimeBlock when a SpecialtyBlock is dropped onto it
            var drop = document.getElementById('hospital_id');

            drop.setAttribute("weekNo",this.getAttribute("weekNo"));
            drop.setAttribute("studentID", this.getAttribute("studentID"));

            drop.setAttribute("timeBlock", this.getAttribute("timeBlock"));

            drop.setAttribute("specialtyID", ev.target.getAttribute("specialtyID"));

        }
      }

    }

    getDivID(){
      return this.div.id;
    }

    initialiseStartDate(){
      this.startDate.setMonth(0);
      this.startDate.setDate(1+(7*(this.weekNo-1)));
    }

    initialiseEndDate(){
      this.endDate = this.startDate;
      this.endDate.setDate(this.endDate.getDate()+6); //Day just before the start of the next week
    }

    initialiseAssignedHospAttributes(){
      this.assigned_hosp.style.textAlign = "center"
      //p.style.width = "100%";
      this.div.appendChild(document.createElement('br')); //put space first
      this.div.appendChild(this.assigned_hosp);
    }

    getHospitalID(){
      return this.hospitalID;
    }

    getSpecialtyDuration(){
      return this.specialtyDuration;
    }

    getWeekNo(){
      return this.weekNo;
    }

    getDiv(){
      return this.div;
    }

    setSpecialtyID(specialtyID){
      this.specialtyID = specialtyID;
    }

    getSpecialtyID(){
      return this.specialtyID;
    }


    getAssigned(){
      return this.assigned;
    }

    setAssigned(value){
      this.assigned = value;
    }

    displayDate(){
      var temp = document.createElement('div');
      var p = document.createElement('p');

      p.setAttribute('id','start_date');
      temp.style.textAlign = "center"
      temp.style.width = "100%";
      temp.style.borderRadius= "25px";
      temp.style.background = "#FFFFFF";
      p.style.color = "black";
      p.innerHTML = this.startDate.getDate() + "-" + this.startDate.getMonth()+1 + "-" + this.startDate.getFullYear();

      temp.appendChild(p);
      this.div.appendChild(temp);
      this.div.appendChild(document.createElement('br'));
    }

   }

  class Schedule{
     constructor(){
       this.studentID = "";
       this.weekNo = "";
       this.specialtyID = "";
       this.hospitalID = "";
       this.specialtyDuration = ""
     }

     setStudentID(studentID){
       this.studentID = studentID;
     }

     setWeekNo(weekNo){
       this.weekNo = weekNo;
     }

     setSpecialtyID(specialtyID){
       this.specialtyID = specialtyID;
     }

     setHospitalID(hospitalID){
       this.hospitalID = hospitalID;
     }

     setSpecialtyDuration(specialtyDuration){
       this.specialtyDuration = specialtyDuration;
     }

     getSpecialtyDuration(){
       return this.specialtyDuration;
     }

     getWeekNo(){
       return this.weekNo;
     }

     getStudentID(){
       return this.studentID;
     }

     getSpecialtyID(){
       return this.specialtyID;
     }

     getHospitalID(){
       return this.hospitalID;
     }



    }

  class SpecialtyBlock{
      constructor(specialtyID,specialtyName,specialtyDuration,studentID,color){
        this.div = document.createElement('div');
        this.specialtyID = specialtyID;
        this.div.setAttribute("specialtyID", specialtyID);
        this.specialtyName = specialtyName;
        this.specialtyDuration = specialtyDuration;
        this.specialtyID=specialtyID;
        this.color = color;
        //For div ID
        this.studentID = studentID;
        this.div.setAttribute("id",this.studentID+"#"+this.specialtyID+"#"+this.specialtyName);

        this.initialiseDivAttributes();
      }

      initialiseDivAttributes(){
        //Set div attributes
        var temp = document.createElement('p');
        temp.style.textAlign = "center";
        temp.style.alignItems = "center";
        //temp.width = "wrap-text";
        temp.innerHTML = this.specialtyName;
        this.div.appendChild(temp);
        //this.div.innerHTML = this.specialtyName;
        this.div.style.textAlign = 'center';
        this.div.style.width = (100*this.specialtyDuration) +'px';
        this.div.style.height = '30px';
        this.div.style.display = 'flex';
        this.div.style.border = "1px solid #aaaaaa";
        this.div.style.alignItems = 'center';
        this.div.style.background = this.color;
        this.div.style.color = "white"
        this.div.style.borderRadius= "10px";
        //this.div.style.textAlign = "center"   //this didnt work to center the specialty name

        //this.div.setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
        //this.div.setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id

        this.div.setAttribute("draggable","true");
         //String(this.specialtyName);


        //On dragstart function
        var that = this;
        this.div.ondragstart = function(ev){

         // console.log("ondragstart");
          //Transfer div id
          ev.dataTransfer.setData("text", ev.target.id);
          //Transfer SpecialtyID
          console.log("Trying to send: "+ that.specialtyID);
          ev.dataTransfer.setData("specialtyID", that.specialtyID);

          //Transfer Specialty Duration

          ev.dataTransfer.setData("specialtyDuration", that.specialtyDuration);


        };

        this.div.ondrop = function(ev){
          console.log("in specialty drop: " +this.getAttribute("specialtyID"));
          ev.target.setAttribute("specialtyID",this.getAttribute("specialtyID"));

        };



      }

      getSpecialtyName(){
        return this.specialtyName;
      }

      getSpecialtyDuration(){
        return this.specialtyDuration;
      }

      getDiv(){
        return this.div;
      }

     }

  class ProgrammeSchedule{
        constructor(parentObject){
          this.programmeCode = "i am the code";
          this.parentObject = parentObject;
          this.timelines =[];
          this.initialiseTimelines();
          this.populateSchedule();
        }


        //Create a number of timelines for each student in the programme
        initialiseTimelines(){

          <% @students.each do |student| %>
            var student_user_id = "<%=student.user_id%>";
            var student_name = "student";                     //default name incase of errors
            <% @all_users.each do |user| %>                 // search for user
                if(student_user_id == <%=user.id%>){
                    student_name = "<%=user.user_LastName%>" +", "+ "<%=user.user_FirstName%>";
                }
            <%end%>
            this.timelines.push(new Timeline(<%=student.id%>, student_name, <%=student.studentNumber%>));
          <%end%>
        }

        saveSchedule(){
          //console.log("Trying to save schedule");
          //For each timeline
          for(var i =0; i<this.timelines.length; i++){
            //console.log("Checking timline no: "+i);
            var currSchedule = this.timelines[i].getSchedules();
            //console.log("Number of schedules for timeline: "+currSchedule.length);
            //For each schedule in a timeline
            for(var j =0; j<currSchedule.length;j++){
              //console.log("Check schedule no: "+j);
              var studentID = currSchedule[j].getStudentID();
              var weekNo = currSchedule[j].getWeekNo();
              var specialtyID = currSchedule[j].getSpecialtyID();
              console.log("in saveSchedule : " +specialtyID);
              var specialtyDuration = currSchedule[j].getSpecialtyDuration();
              var hospitalID = currSchedule[j].getHospitalID();
              //console.log("Schedule information is: "+studentID+" "+weekNo+" "+specialtyID+" "+specialtyDuration+" "+hospitalID);
              //TODO: Save this schedule to the Database
              //calls function to do an ajax req
              //still need to update parameters and fix Db table
              //console.log(hospitalID);
              SaveRecord(studentID,specialtyID,weekNo,specialtyDuration,hospitalID);


            }
          }
        }

        populateSchedule(){
          var table = document.createElement('table');
          for(var i = 0; i<this.timelines.length; i++){
            var br = document.createElement('br'); //Front-end
            table.appendChild(br); //Front-end

            var tr = this.timelines[i].displayTimeline();
            table.appendChild(tr);

            table.appendChild(br); //Front-end
          }
          this.parentObject.appendChild(table);
        }

      }


  //Create a new programme schedule for a specific programme
  var programmeSchedule = new ProgrammeSchedule(document.getElementById('schedule_window'));
  var chosen_hospital_id = 0;

//onclick function to save all the schedules to the database
  function makeChanges(){
    //console.log("Make changes");
    programmeSchedule.saveSchedule();
  }

  //onclick function to assign student to hospital
  function assignHospital(){
    var drop = document.getElementById('hospital_id');
    var hospitalName = drop.options[drop.selectedIndex].text;

    document.getElementById('showAssign').innerHTML = "Student successfully assigned to " + hospitalName + "!"; //Changing the content of the Div to display assigned student


    var hospital_id = drop.options[drop.selectedIndex].value;
    chosen_hospital_id = hospital_id;
    var week_no = drop.getAttribute("weekNo");



    var student_id = drop.getAttribute("studentID");


    var timelines = programmeSchedule.timelines;
    var size = timelines.length;

    var timeline;
    for (let i = 0 ; i < size; i++)
    {
      timeline = timelines[i];
      if (timeline.studentID == student_id)
        {
          break;
        }
    }

    var timeblock;
    for (let i = 0 ; i < size; i++)
    {
      timeblock = timeline.timeBlocks[i];
      if (timeblock.weekNo == week_no)
        {
          break;
        }
    }

    timeblock.hospitalID = hospital_id;
    timeblock.assigned_hosp.innerHTML = hospitalName;

    //to add hospital name to extra timeblocks according to specailty duration
    specialty_duration = timeblock.specialtyDuration;

    timeblock.div.innerHTML = hospitalName;


    console.log("Hospital ID is: " +drop.options[drop.selectedIndex].value); //HospitalID
    console.log("weekNo is: " +drop.getAttribute("weekNo"));
    console.log("studentid is: " + drop.getAttribute("studentID"));
    console.log("in hos assign: " + timeblock.hospitalID);








  }
  //need to change the params for rotation to weekno and add specialtyduration
  function SaveRecord(studentID,specialtyID,weekNo,specialtyDuration, hospitalID){

  console.log("specialtyID in SaveRecord: " +specialtyID);
    $.post("/schedules",
    {
    student_id: studentID,
    specialty_id: specialtyID,
    hospital_id: hospitalID,
    week_no: weekNo,
    specialty_duration: specialtyDuration
    });
  }
 </script>



  <!---------------------------------------------------------------------------------------------->




</div>

<br>

<br>
<br>
</div>
