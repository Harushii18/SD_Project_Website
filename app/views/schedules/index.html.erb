

<!-- Div to display alerts when studnets are assigned -->
<div id="showAssign" class="alert alert-primary" role="alert">

</div>

<div style="text-align:center; position:absolute;">
<br></br>
<h1>Manage Schedules</h1>

<br>

<!-- Vertically centered modal -->
<div class="modal fade" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">SELECT HOSPITAL</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <em>Assign Student To A Hospital Below:</em>

        <br>
        <br>

        <!--Dropdown for hospitals -->
        <select name="hospital_drop" id="hospital_id" onchange="this.form.submit()" class="btn btn-secondary dropdown-toggle">
        <%= options = options_from_collection_for_select(Hospital.all, 'id', 'hospital_name') %>
        </select>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="assignHospital()" data-dismiss="modal">Confirm</button>
      </div>
    </div>
  </div>
</div>


<br>

<div class="container-fluid">
    <div class="d-flex justify-content-evenly">

    </div>
</div>

<!-- Add search forms for OWN model -->
<!-- unless statement takes out search bar when editing,creating,etc-->
<% unless url_for != users_path %>
<!--Makes the seach field neater however cant find a way to pull search field to  right of navbar -->
  <form class="form-inline my-2 my-lg-0">
      <%=render "users/filters"%>
  </form>
<% end %>
<!--ADD Below check users controller and -filters.html.erb for eg -->



<form action="/schedules">
<label> <h5>Select Programme Code</h5> </label>
<br>
<select name="programme_id" id="programme_id" onchange="this.form.submit()" class="btn btn-primary dropdown-toggle">
<%= options = options_from_collection_for_select(Programme.all, 'id', 'programme_code',@current_programme_id) %>
</select>
</form>


<!-- Some functions for the Drag and Drop Feature -->




<!-- My Classes -->
<script>
  //Time Block class for each individual div
   class TimeBlock{
    constructor(document, weekNo, studentNo){
      //Class attributes
      this.currDiv = document.createElement('div'); //NB
      this.weekNo = weekNo; //NB
      this.startDate = new Date(); //NB
      this.assigned = ""; //When dropped on this timeblock, value will be the name of the specialty

      //Initially set start date to first day of the year
      this.startDate.setDate(1);
      this.startDate.setMonth(0);
      this.startDate.setYear(2021); //Change to current year - for every year

      this.startDate.setDate(1+ (7*this.weekNo) );

      //Set End Date
      this.endDate = this.startDate; //NB
      this.endDate.setDate(this.endDate.getDate()+6);

      //DOM element
      this.document = document;

      this.studentNo = studentNo;

      //Div attributes for each div block in the timeline
      this.currDiv.style.width = '60px';
      this.currDiv.style.height = '10px';
      this.currDiv.style.padding = '10px';
      this.currDiv.style.display = 'flex';
      this.currDiv.style.border = "1px solid #aaaaaa";
      this.currDiv.style.alignItems = 'center';
      //this.currDiv.setAttribute("id", this.studentNo+this.weekNo);

      this.currDiv.ondrop = function(ev){
        ev.preventDefault();

        var data = ev.dataTransfer.getData("text");
        //var newTarget = document.getElementById(this.studentNo+this.weekNo);

        ev.target.appendChild(document.getElementById(data));
        //ev.target.style.backgroundColor = 'green' ;
      };

      //this.currDiv.onclick = function(ev){
        //var orig = document.getElementById('colorBox');
        //orig.style.backgroundColor = 'white';
      //}


      this.currDiv.ondragover = function(ev){
        ev.preventDefault();
      };

    //  this.setAttributeOfDiv("ondrop","drop(event)");
    //  this.setAttributeOfDiv("ondragover","allowDrop(event)");

    }


      setColour(colour){
        this.currDiv.style.backgroundColor = colour;
      }

    //Getter Methods
      getWeekNo(){
        return this.weekNo;
      }

      getAssigned(){
        return this.assigned;
      }

      getStartDate(){
        return this.startDate;
      }

      getEndDate(){
        return this.endDate;
      }

    //Setter Methods
    setAttributeOfDiv(attribute, attributeValue){
      this.currDiv.setAttribute(attribute,attributeValue);
    }

    //Return td with div appended to it
    returnTD(){
      var td = this.document.createElement('td');
      td.appendChild(this.currDiv);
      return td;
    }

    //Testing
    output(message){
      console.log(message);
    }

  }

  //Timeline class for the entire timeline
   class Timeline{
    constructor(document, studentNo){

      this.document = document;
      this.timeBlocks = []
      this.studentNo = studentNo;

      //Append the tr (with the 52 time blocks) to a table
      var table = this.document.createElement('table');
      var tr = this.setTimeBlocks();
      table.appendChild(tr);

      //Append the table to a new row
      var tr = this.document.createElement('tr');
      tr.appendChild(table);


      //This div holds the timeline (All 52 div blocks)
      var container = this.document.createElement('div');
      container.appendChild(tr);
      //Need to dynamically set the width and height in the future (So the timeline adjusts size with the window size of the browser)
      //Note: I think we need to use window.InnerWidth and window.InnerHeight here but we'll come back to this at some point.
      container.style.height = "50px";
      container.style.width = "1800px";
      container.style.overflow = 'scroll';
      container.style.alignItems = 'center';

      //This is the complete timeline
      this.timeline = container;

    }

  //Set time blocks and return a tr with all 52 timeblocks appended to it
    setTimeBlocks(){
      var tr = document.createElement('tr');
      //Create 52 div blocks
      for(let i = 1; i<=52;i++){ //Loop Counter is set like this to keep track of the week number
             var currTimeBlock = new TimeBlock(this.document,i, this.studentNo);
             //currTimeBlock.output("yes"); //Testing

            // currTimeBlock.setAttributeOfDiv("ondrop","drop(event)");
             //currTimeBlock.setAttributeOfDiv("ondragover","allowDrop(event)");

             tr.appendChild(currTimeBlock.returnTD());
             this.timeBlocks.push(currTimeBlock);
         }
      return tr;
    }

    getTimeline(){
      return this.timeline;
    }

    }





    class SpecialtyBlock{
      constructor(document, studentID, weeks){
        this.document = document;
        this.div = document.createElement("div");
        this.specialtyName = "";
        this.id = studentID;
        this.weeks = weeks;

        //Set div attributes
        this.div.style.width = '60px';
        this.div.style.height = '10px';
        this.div.style.padding = '15px';
        this.div.style.display = 'flex';
        this.div.style.border = "1px solid #aaaaaa";
        this.div.style.alignItems = 'center';
        this.div.setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
        this.div.setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id



      }

      setSpecialtyName(specaltyName){
        this.specialtyName = specialtyName;
      }

      returnSpecialtyDivRow(){
        var tr = this.document.createElement('tr');
        var td = this.document.createElement('td');

        var disName = this.document.createElement('p');
        disName.innerHTML = String(this.specialtyName);
        this.div.appendChild(disName);

        //Div attributes for the draggable box (to drag and drop the specialty in the timeline)
        this.div.setAttribute("id", this.id + this.specialtyName); // id needs to be different for each div
        this.div.setAttribute("draggable","true");
        this.div.ondragstart = function(ev){
          console.log("BEING DRAGGED");

          ev.dataTransfer.setData("text", ev.target.id);
        };



        td.appendChild(this.div);
        tr.appendChild(td);

        return tr;
      }

     }

</script>


<div class="m-4">


<!-- Main Table - this is the table where each row represents a single student's schedule -->
 <table id="mainTable">

<!-- <script type="module" src="../../../classes/timeline.js"></script> -->
 <script>

   <% @students.each do |student| %>
     //Main Table
     var mainTable = document.getElementById('mainTable');



     //STUDENT INFORMATION

     var table = document.createElement('table'); //Temporary Table element for Student information (this table is appended to the row of the main table)

     //Student Number
     var tr = document.createElement('tr'); //Table row element
     var studentNo = document.createElement('p'); //Paragraph element - for text
     var td = document.createElement('td'); //Table cell element

     //Note: This needs to be the student's name
     //This is the text for the cell
     studentNo.innerHTML = <%= student.studentNumber %>;

     td.appendChild(studentNo); //Add paragraph element to data cell element
     tr.appendChild(td); //Add data cell element to row element
     table.appendChild(tr); //Add row element to temporary table


     //For some reason, the Student Name doesn't work right now (There's a reference error)
/*
     //Student Name
     var studentName = document.createElement('p');
     var td = document.createElement('td');
     //Note: This needs to be the student's name
     studentName.innerHTML = "Student Name";
     td.appendChild(studentName);
     tr.appendChild(td);
     table.appendChild(tr);
*/

    //Create a new row element
     var tr = document.createElement('tr');
     tr.appendChild(table); //Add the temporary table to the new row element
     mainTable.appendChild(tr); //Add the new row element to the main table


     //NOTE, any other student information should appear here before the Disciplines below


     //Disciplines
     //Create a list of the specialties that this student is taking
     //Determine list of courses for student
     //Note: This method is not very efficient right now. Needs attention at some point.
     var listOfCourses = [];
     <% @programme_courses.each do |programme_course| %>
         var temp1 = <%= programme_course.programme_id %>;
         var temp2 = <%= student.programme_id %>;
         if( temp1 == temp2 ){
           listOfCourses.push(<%=programme_course.course_id%>);
         }
     <% end %>

     //Determine list of specialties based on courses the student is taking
     var listOfSpecialties = [];

     <% @course_specialties.each do |course_specialty| %>
         var temp1 = <%= course_specialty.course_id %>;
         if( listOfCourses.includes(temp1) ){
           listOfSpecialties.push(<%=course_specialty.specialty_id%>);

           var weeks = <%=course_specialty.weeks%>;

         }
     <% end %>


     //Dynamically create a number of Divs for the different specialties
     var table = document.createElement('table');

     //Check each specialty in database
     <% @specialties.each do |specialty| %>
         var temp1 = <%= specialty.id %>;

         //Check if student is assigned to current specialty
         if( listOfSpecialties.includes(temp1) ){
           var specialtyBlock = new SpecialtyBlock(document, studentNo.innerHTML, weeks );


           specialtyName = <%=specialty.id%>;
           specialtyBlock.setSpecialtyName(specialtyName);
           table.appendChild(specialtyBlock.returnSpecialtyDivRow());
         }

     <% end %>


     var tr = document.createElement('tr');
     tr.appendChild(table);

     mainTable.appendChild(tr); //Append to main table



    var timeline = new Timeline(document, studentNo.innerHTML);
    //tempDiv is the container in the timeline class
     mainTable.appendChild(timeline.getTimeline()); //Append to main table

<% end %>

  //onclick function to assign student to hospital
  function assignHospital()
  {
    var drop = document.getElementById('hospital_id');
    var hospitalName = drop.options[drop.selectedIndex].text;

    document.getElementById('showAssign').innerHTML = "Student successfully assigned to " + hospitalName + "!"; //Changing the content of the Div to display assigned student

  }
 </script>

</table>

  <!---------------------------------------------------------------------------------------------->




</div>

<br>

<br>
<br>
</div>
