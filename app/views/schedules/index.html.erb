

<!-- Div to display alerts when studnets are assigned -->
<div id="showAssign" class="alert alert-primary" role="alert">

</div>

<div style="text-align:center; position:absolute;">
<br></br>
<h1>Manage Schedules</h1>

<br>

<!-- Vertically centered modal -->
<div class="modal fade" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">SELECT HOSPITAL</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <em>Assign Student To A Hospital Below:</em>

        <br>
        <br>

        <!--Dropdown for hospitals -->
        <select name="hospital_drop" id="hospital_id" onchange="this.form.submit()" class="btn btn-secondary dropdown-toggle">
        <%= options = options_from_collection_for_select(Hospital.all, 'id', 'hospital_name') %>
        </select>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="assignHospital()" data-dismiss="modal">Confirm</button>
      </div>
    </div>
  </div>
</div>


<br>

<div class="container-fluid">
    <div class="d-flex justify-content-evenly">

    </div>
</div>

<!-- Add search forms for OWN model -->
<!-- unless statement takes out search bar when editing,creating,etc-->
<% unless url_for != users_path %>
<!--Makes the seach field neater however cant find a way to pull search field to  right of navbar -->
  <form class="form-inline my-2 my-lg-0">
      <%=render "users/filters"%>
  </form>
<% end %>
<!--ADD Below check users controller and -filters.html.erb for eg -->


<button type="button" class="btn btn-primary" onclick="" >Save Changes</button>
<br></br>
<form action="/schedules">
<label> <h5>Select Programme Code</h5> </label>
<br>
<select name="programme_id" id="programme_id" onchange="this.form.submit()" class="btn btn-primary dropdown-toggle">
<%= options = options_from_collection_for_select(Programme.all, 'id', 'programme_code',@current_programme_id) %>
</select>
</form>


<!-- Some functions for the Drag and Drop Feature -->


<div class="m-4" id="schedule_window">

<!-- My Classes -->
<script>


  class Timeline{
    constructor(studentID, studentName, parentObject){
        this.studentID = studentID;
        this.studentName = studentName;
        this.parentObject = parentObject;
        this.specialties = [];
        this.timeBlocks = [];
        this.schedules = [];
        this.initialiseTimeBlocks();
        this.initialiseSpecialties();
        this.initialiseSchedules();

        //this.displayTimeline();
    }

    initialiseTimeBlocks(){
      for(var i =0; i<52; i++){
        this.timeBlocks.push(new TimeBlock(i+1));
      }
    }

    //TODO: Store specialty IDs for the specialties the student is taking
    initialiseSpecialties(){
      <% @specialties.each do |specialty| %>
      var specialtyBlock = new SpecialtyBlock(<%= specialty.id %>, <%=specialty.id%>, 2);
        this.specialties.push(specialtyBlock);
      <%end%>
    }

    //TODO: Populate schedule array with any existing schedules, for that student, found in the database.
    initialiseSchedules(){

    }

    //Add a new schedule to the schedule array
    //TODO: Fix overlapping Scheduling - in terms of durations and the week of the desired scheduling vs currently scheduled
    addSchedule(studentID, weekNo, specialtyID, hospitalID){
      var isValid = true;
      for(var i=0; i<this.schedules.length; i++){
        if(this.schedules[i].getWeekNo==weekNo){
          //NEEDS MORE ATTENTION
          isValid = false;
        }
      }

      if(isValid==true){
        this.schedules.push(new Schedule(studentID, weekNo, specialtyID, hospitalID));
      }

    }

    //Remove Schedule for a weekNo
    removeSchedule(weekNo){
      for(var i = 0; i< this.schedules.length; i++){
        if(this.schedules[i].getWeekNo()==weekNo){
          this.schedules.splice(i,1);
        }
      }
    }

    //Return array of schedules
    getSchedules(){
      return this.schedules;
    }

    displayTimeline(){

      //Main Table
      var table = document.createElement('table');

      //console.log('executed here');
      //Add multiple information of student
      var studentInformation = [this.studentID, this.studentName];
      for(var i = 0 ;i<studentInformation.length;i++){
        var tr = document.createElement('tr');
        var p = document.createElement('p');
        p.innerHTML = studentInformation[i];
        console.log("Student Info: " + p.innerHTML);
        var td = document.createElement('td');
        td.appendChild(p);
        tr.appendChild(td);
        table.appendChild(tr);
      }

      //Add Specialties for students
      console.log("Length of specialties is: "  + this.specialties.length);
      for(var i = 0; i<this.specialties.length;i++ ){
        console.log("Added this specialty: "+i);
        var tr = document.createElement('tr');
        var td = document.createElement('td');
        td.appendChild(this.specialties[i].getDiv());
        tr.appendChild(td);
        table.appendChild(tr);
      }



      //Add TimeBlocks for timeline
      var tr = document.createElement('tr');
      for(var i = 0; i<52; i++){
        var p = document.createElement('p');
        //p.innerHTML = studentInformation[i];
        var td = document.createElement('td');
        td.appendChild(this.timeBlocks[i].getDiv());
        tr.appendChild(td);
      }
      var container = document.createElement('div');
      container.appendChild(tr);
      //Need to dynamically set the width and height in the future (So the timeline adjusts size with the window size of the browser)
      //Note: I think we need to use window.InnerWidth and window.InnerHeight here but we'll come back to this at some point.
      container.style.height = "50px";
      container.style.width = "1800px";
      container.style.overflow = 'scroll';
      container.style.alignItems = 'center';

      var tr = document.createElement('tr');
      tr.appendChild(container);

      table.appendChild(tr);

      return table; //Return row which corresponds to a student's timeline
      //Append to main document
    //  this.parentObject.appendChild(table);

    }


  }

  class TimeBlock{
    constructor(weekNo){
      this.weekNo = weekNo;
      this.div = document.createElement('div');
      this.startDate = new Date();
      this.endDate = new Date();

      this.initialiseStartDate();
      this.initialiseEndDate();
      this.initialiseDivAttributes();
    }

    initialiseDivAttributes(){
      this.div.style.width = '60px';
      this.div.style.height = '10px';
      this.div.style.padding = '10px';
      this.div.style.display = 'flex';
      this.div.style.border = "1px solid #aaaaaa";
      this.div.style.alignItems = 'center';
    }

    initialiseStartDate(){
      this.startDate.setMonth(0);
      this.startDate.setDate(1+(7*(this.weekNo-1)));
    }

    initialiseEndDate(){
      this.endDate = this.startDate;
      this.endDate.setDate(this.endDate.getDate()+6); //Day just before the start of the next week
    }

    getDiv(){
      return this.div;
    }

   }

   class Schedule{
     constructor(studentID,weekNo,specialtyID,hospitalID){
       this.studentID = studentID;
       this.weekNo = weekNo;
       this.specialtyID = specialtyID;
       this.hospitalID = hospitalID;
     }

     getWeekNo(){
       return this.weekNo;
     }
     getStudentID(){
       return this.studentID;
     }
     getSpecialtyID(){
       return this.specialtyID;
     }
     getHospitalID(){
       return this.hospitalID;
     }



    }

    class SpecialtyBlock{
      constructor(specialtyID,specialtyName,specialtyDuration){
        this.div = document.createElement('div');
        this.specialtyID = specialtyID;
        this.specialtyName = specialtyName;
        this.specialtyDuration = specialtyDuration;

        this.initialiseDivAttributes();
      }

      initialiseDivAttributes(){
        //Set div attributes
        this.div.style.width = '60px';
        this.div.style.height = '10px';
        this.div.style.padding = '15px';
        this.div.style.display = 'flex';
        this.div.style.border = "1px solid #aaaaaa";
        this.div.style.alignItems = 'center';
        this.div.setAttribute("data-toggle","modal"); // defining the click to bring up the modal box
        this.div.setAttribute("data-target","#staticBackdrop"); // setting the target to the modals id
        this.div.innerHTML = String(this.specialtyName);
      }

      getSpecialtyName(){
        return this.specialtyName;
      }

      getSpecialtyDuration(){
        return this.specialtyDuration;
      }
      getDiv(){
        return this.div;
      }

     }

     class ProgrammeSchedule{
        constructor(parentObject){
        //  this.programmeCode = programmeCode;
          this.parentObject = parentObject;
          this.timelines =[];
          this.initialiseTimelines();
          this.populateSchedule();
        }


        //Create a number of timelines for each student in the programme
        initialiseTimelines(){
          <% @students.each do |student| %>
            this.timelines.push(new Timeline(<%=student.id%>,"John Doe"));
          <%end%>
        }

        saveSchedule(){
          //For each timeline
          for(var i =0; i<this.timelines.length; i++){
            var currSchedule = this.timelines[i].getSchedule();
            //For each schedule in a timeline
            for(var j =0; j<currSchedule.length;j++){
              var weekNo = currSchedule[j].getWeekNo();
              var specialtyID = currSchedule[j].getSpecialtyID();
              var hospitalID = currSchedule[j].getHospitalID();
              //TODO: Save this schedule to the Database

            }
          }
        }

        populateSchedule(){
          var table = document.createElement('table');
          for(var i = 0; i<this.timelines.length; i++){
            var tr = this.timelines[i].displayTimeline();
            table.appendChild(tr);
          }
          this.parentObject.appendChild(table);
        }

        returnDisplay(){
          return this.parentObject;
        }

      }




  var programmeSchedule = new ProgrammeSchedule(document.getElementById('schedule_window'));

  //var divElement = document.getElementById('schedule_window');
  //divElement.appendChild(programmeSchedule.returnDisplay());

</script>




<script>
  //onclick function to assign student to hospital
  function assignHospital()
  {
    var drop = document.getElementById('hospital_id');
    var hospitalName = drop.options[drop.selectedIndex].text;

    document.getElementById('showAssign').innerHTML = "Student successfully assigned to " + hospitalName + "!"; //Changing the content of the Div to display assigned student

  }
 </script>



  <!---------------------------------------------------------------------------------------------->




</div>

<br>

<br>
<br>
</div>
